module postfix(
	CLK,
	RESET,
	OP_MODE,
	IN_VALID, 
	IN,
	OUT, 
	OUT_VALID
);
//declared
input IN_VALID;
input [3:0]IN;
input CLK;
input RESET;
input OP_MODE;
output reg OUT_VALID;
output reg [15:0]OUT;

reg [19:0] stack[15:0];
reg [4:0] stack_count;
reg [15:0] check_ans;

integer i;

always@(posedge CLK or negedge RESET)begin//negedge原本1 變0 時觸發
	if(!RESET)begin
		stack_count <= 5'd0;
		for(i = 0; i < 16; i++)begin
			stack[stack_count] <= 20'd0;
			
		end//CLEAR
	end
	else if(IN_VALID)begin
			if(OP_MODE)begin
				if(IN == 4'b0001)begin //+
					stack[stack_count -2] <= stack[stack_count - 2] + stack[stack_count - 1];//進行運算且算出來的答案放在第一個數字的格子
					stack_count <= stack_count - 1;
				end
				else if(IN == 4'b0010)begin //-
					stack[stack_count -2] <= stack[stack_count - 2] - stack[stack_count - 1];
					stack_count <= stack_count - 1;
				end
				else if(IN == 4'b0100)begin //*
					stack[stack_count -2] <= stack[stack_count - 2] * stack[stack_count - 1];
					stack_count <= stack_count - 1;
				end
				else begin
					for(i = 0; i < 16; i++)begin
						stack[stack_count] <= stack[stack_count];
					end
					stack_count <= stack_count;//沒指令STACK COUNT 都不變
				
				end
			end
			else begin//OP_MODE=0 讀operand數字
				stack[stack_count] <= IN;
				stack_count <= stack_count + 1;
			end
	end//IN_VALID END
	else begin//in_valid沒有執行
		stack_count <= 5'd0;
		for(i = 0; i < 16; i++)begin
			stack[stack_count] <= 20'd0;
		end
		check_ans <= 0;//感覺沒用
	end
end

reg [1:0] output_state;  //final state machine

always @(posedge CLK)begin
	if(!RESET)begin
		OUT <= 16'd0;
		OUT_VALID <= 0;
		output_state <= 2'd0;
	end
	else begin
		if(IN_VALID)begin//有in_valid則不會輸出
			output_state <= 2'd1;
			OUT <= 16'd0;
			OUT_VALID <= 0;
		end
		else begin
			if(output_state == 2'd1)begin//IN_VALID=0
				output_state <= 2'd2;
				OUT_VALID <= 0;
				OUT <= 16'd0;//隔一個CLK在輸出out
			end
			else if(output_state == 2'd2)begin
				output_state <= 2'd0;
				OUT_VALID <= 1;
				OUT <= stack[0];//輸出答案
			end
			else begin
				output_state <= 2'd0;//equal reset
				OUT_VALID <= 0;
				OUT <= 16'd0;
			end
		end
	end
end

endmodule